openapi: 3.0.1
info:
  title: Core-catalog
  description: Core-catalog api
  version: 0.0.1

paths:
  /v1/books/{bookInstanceId}/reservation:
    post:
      operationId: initializeBookReservation
      tags: [ Books ]
      parameters:
        - name: bookInstanceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the book instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookReservationInitializationRequest'
      responses:
        200:
          description:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInstanceResponse'

  /v1/books/{bookContentId}/instances:
    get:
      operationId: getBookInstancesByBookContentId
      tags: [ Books ]
      parameters:
        - name: bookContentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the book content
      responses:
        200:
          description: Book Instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookInstanceResponse'

  /v1/books/{bookContentId}:
    get:
      operationId: getBooksContentById
      tags: [ Books ]
      parameters:
        - name: bookContentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the book
      responses:
        200:
          description: Book Details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookContentResponse'
        404:
          $ref: '#/components/responses/404'

  /v1/books/name/{title}:
    get:
      operationId: getBookContentByTitle
      tags: [ Books ]
      parameters:
        - name: title
          in: path
          required: true
          schema:
            type: string
          description: Title of the book
      responses:
        200:
          description: Book Details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookContentResponse'
        404:
          $ref: '#/components/responses/404'

components:

  responses:
    '200':
      description: Success
    '204':
      description: No Content
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    BookReservationInitializationRequest:
      type: object
      required:
        - external_id
      properties:
        external_id:
          type: string
          format: uuid

    BookInstanceResponse:
      type: object
      required:
        - id
        - bookContentId
        - status
      properties:
        id:
          type: string
          format: uuid
        bookContentId:
          type: string
          format: uuid
        status:
          type: string

    BookContentResponse:
      type: object
      required:
        - id
        - title
        - author
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        author:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: machine-readable string that can be used for customized error handling and monitoring
          type: string
          example: 'BadRequest'
        message:
          description: human, but not end-client text error message, can be used for extended logging
          type: string
          example: Invalid request. Error description will be returned in the response body