openapi: 3.0.1
info:
  title: API Gateway
  description: API Gateway for OpenBook services
  version: 0.0.1

paths:

  /v1/users/registration:
    post:
      operationId: registerUser
      tags: [ Users ]
      parameters:
        - $ref: '#/components/parameters/IdempotencyTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: UserRegisterRequest
              type: object
              additionalProperties: false
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        200:
          description: UserRegisterResponse
          content:
            application/json:
              schema:
                title: UserRegisterResponse
                type: object
                additionalProperties: false
                required:
                  - uid
                properties:
                  uid:
                    $ref: '#/components/schemas/Uid'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'

  /v1/users/info/{userId}:
    get:
      operationId: userInfo
      tags: [ Users ]
      parameters:
        - $ref: '#/components/parameters/UIDPath'
      responses:
        200:
          description: UserInfoResponse
          content:
            application/json:
              schema:
                title: UserInfoResponse
                type: object
                additionalProperties: false
                required:
                  - firstName
                  - lastName
                  - email
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    $ref: '#/components/schemas/Email'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'

  /v1/users/login:
    post:
      operationId: loginUser
      tags: [ Users ]
      parameters:
        - $ref: '#/components/parameters/IdempotencyTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtLoginResponse'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'

  /v1/booking/{bookId}/reservation:
    post:
      operationId: reserveBook
      tags: [ Reservation ]
      parameters:
        - $ref: '#/components/parameters/IdempotencyTokenHeader'
        - $ref: '#/components/parameters/UIDHeader'
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
            nullable: false
      responses:
        200:
          description: Book reservation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookReservationResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'

  /v1/booking/reservation/{reservationId}:
    get:
      operationId: getReservationRequest
      tags: [ Reservation ]
      parameters:
        - $ref: '#/components/parameters/UIDHeader'
        - name: reservationId
          in: path
          required: true
          schema:
            type: string
          description: ID of the reservation request.
      responses:
        200:
          description: Reservation request Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookReservationRequestResponse'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'

  /v1/books/{bookId}:
    get:
      operationId: getBookById
      tags: [ Books ]
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
          description: ID of the book.
      responses:
        200:
          description: Book Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookContentResponse'
        404:
          $ref: '#/components/responses/404'

  /v1/books/name/{bookName}:
    get:
      operationId: getBookByName
      tags: [ Books ]
      parameters:
        - name: bookName
          in: path
          required: true
          schema:
            type: string
          description: Name of the book.
      responses:
        200:
          description: Book Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookContentResponse'
        404:
          $ref: '#/components/responses/404'

  /v1/books:
    get:
      operationId: searchBooks
      tags: [ Books ]
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
            description: Title of the book.
        - name: author
          in: query
          required: false
          schema:
            type: string
          description: Author of the book.
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/PageSizeQuery'
      responses:
        200:
          description: Search Results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSearchResponse'
        404:
          $ref: '#/components/responses/404'
components:

  parameters:

    UIDHeader:
      in: header
      name: X-Uid
      schema:
        type: string
        format: uuid
        nullable: false
      required: true

    UIDPath:
      in: path
      name: userId
      schema:
        type: string
        format: uuid
        nullable: false
      required: true

    IdempotencyTokenHeader:
      in: header
      name: X-Idempotency-Token
      schema:
        type: string
      required: true

    PageQuery:
      in: query
      name: page
      schema:
        type: integer
        default: 1
      required: false
      description: Page number for pagination.

    PageSizeQuery:
      in: query
      name: pageSize
      schema:
        type: integer
        default: 10
      required: false
      description: Number of items per page for pagination.

  responses:
    '200':
      description: Success
    '204':
      description: No Content
    '401':
      description: Authorization error (either passport auth or bank auth or they conflicts)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '409':
      description: Duplicate request causing a conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Email:
      description: Users' email address
      nullable: false
      format: email
      type: string

    Password:
      description: Users' password
      nullable: false
      format: password
      type: string

    Uid:
      description: Users' UUID
      type: string
      example: abcd1234-abcd-1234-abcd-1a2b3c4d

    BookReservationResponse:
      discriminator:
        propertyName: status
        mapping:
          SUCCESS: '#/components/schemas/BookReservationSuccess'
          FAILED: '#/components/schemas/BookReservationFailure'
      oneOf:
        - $ref: '#/components/schemas/BookReservationSuccess'
        - $ref: '#/components/schemas/BookReservationFailure'

    BookReservationSuccess:
      type: object
      required:
        - status
        - reservationId
      properties:
        status:
          type: string
          enum: [ SUCCESS ]
        reservationId:
          type: string

    BookReservationFailure:
      type: object
      required:
        - status
        - reasonCode
      properties:
        status:
          type: string
          enum: [ FAILED ]
        reasonCode:
          type: string

    BookReservationRequestResponse:
      discriminator:
        propertyName: status
        mapping:
          SUCCESS: '#/components/schemas/ReservationRequestSuccess'
          FAILED: '#/components/schemas/ReservationRequestFailure'
      oneOf:
        - $ref: '#/components/schemas/ReservationRequestSuccess'
        - $ref: '#/components/schemas/ReservationRequestFailure'

    ReservationRequestSuccess:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum: [ SUCCESS ]
        data:
          type: object
          required:
            - id
            - bookId
            - userId
            - reservationStatus
          properties:
            id:
              type: string
            bookId:
              type: string
            userId:
              type: string
            reservationStatus:
              type: string

    ReservationRequestFailure:
      type: object
      required:
        - satus
        - reasonCode
      properties:
        status:
          type: string
          enum: [ FAILED ]
        reasonCode:
          type: string

    BookContentResponse:
      type: object
      required:
        - id
        - title
        - author
        - content
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
        content:
          type: string

    BookSearchResponse:
      type: object
      required:
        - books
        - currentPage
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookContentResponse'
        currentPage:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer

    JwtLoginResponse:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
        refresh_token:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: machine-readable string that can be used for customized error handling and monitoring
          type: string
          example: 'BadRequest'
        message:
          description: human, but not end-client text error message, can be used for extended logging
          type: string
          example: Invalid request. Error description will be returned in the response body